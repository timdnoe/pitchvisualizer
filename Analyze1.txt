  p5.FFT.prototype.analyze1 = function () {
    var mode;
    for (var i = 0; i < arguments.length; i++) {
      if (typeof arguments[i] === 'number') {
        this.bins = arguments[i];
        this.analyser.fftSize = this.bins * 2;
      }
      if (typeof arguments[i] === 'string') {
        mode = arguments[i];
      }
    }
    if (mode && mode.toLowerCase() === 'db') {
      freqToFloat(this);
      this.analyser.getFloatFrequencyData(this.freqDomain);
      return this.freqDomain;
    } else {
        freqToInt(this, this.freqDomain);
  	  // this.freqDomain = 57 + 12 * log(this.freqDomain / 440) / log(2);
  	  // this.freqDomain = log(this.freqDomain);
        this.analyser.getByteFrequencyData(this.freqDomain);

		// var logIndex = [0, 0];
		var logIndex = [];
		// for(var i=2; i<this.freqDomain.length; i++) {
		for(var i=0; i<this.freqDomain.length; i++) {
//			logIndex.push(Math.round(log(i)*100));
			logIndex.push(Math.round(Math.pow(1.009, i + 40)));
			// logIndex.push(i);
		}
		var logFreqDomain = [];
		for(var i=0; i<logIndex.length; i++) {
//			logFreqDomain.push(this.freqDomain[logIndex[i]]);
			logFreqDomain.push(logIndex[i]>=this.freqDomain.length ? 0 : this.freqDomain[logIndex[i]]);
		}
		// console.log(this.freqDomain);
		this.freqDomain = new Uint8Array(logFreqDomain);
		// console.log(this.freqDomain);
var normalArray = Array.apply([], this.freqDomain);
      normalArray.length === this.analyser.fftSize;
      normalArray.constructor === Array;
      return normalArray;
    }
  };